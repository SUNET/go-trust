name: Go

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxslt1-dev xsltproc bc

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run tests with coverage
      run: go test -v -race -timeout 10m -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        fail_ci_if_error: false

    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        # Calculate coverage percentage from coverage.txt
        COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"

        # Generate coverage badge SVG
        mkdir -p .badges/main
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 40" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi

        # Use shields.io to generate the badge
        curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}.svg" > .badges/main/coverage.svg
        echo "Generated coverage badge: ${COVERAGE}% (${COLOR})"
        ls -la .badges/main/coverage.svg

    - name: Get Go version
      id: go-version
      if: github.ref == 'refs/heads/main'
      run: |
        GO_VERSION=$(go list -m -f '{{.GoVersion}}')
        echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_ENV
        echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_OUTPUT

    - name: Generate Go version badge
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p .badges/main
        cat > .badges/main/golang.svg << EOF
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="86" height="20" role="img" aria-label="golang: ${{ env.GO_VERSION }}"><title>golang: ${{ env.GO_VERSION }}</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="86" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="49" height="20" fill="#555"/><rect x="49" width="37" height="20" fill="#007ec6"/><rect width="86" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="255" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="390">golang</text><text x="255" y="140" transform="scale(.1)" fill="#fff" textLength="390">golang</text><text aria-hidden="true" x="665" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="270">${{ env.GO_VERSION }}</text><text x="665" y="140" transform="scale(.1)" fill="#fff" textLength="270">${{ env.GO_VERSION }}</text></g></svg>
        EOF

    - name: Commit badges
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Checking for badge files..."
        ls -la .badges/main/ || { echo "Badge directory not found"; exit 0; }

        if [ ! -f .badges/main/coverage.svg ]; then
          echo "Warning: coverage.svg not found, skipping commit"
          exit 0
        fi

        if [ ! -f .badges/main/golang.svg ]; then
          echo "Warning: golang.svg not found, skipping commit"
          exit 0
        fi

        echo "Both badge files exist, proceeding with commit"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Save generated badges to temp location BEFORE any git operations
        mkdir -p /tmp/badges
        cp -v .badges/main/*.svg /tmp/badges/
        echo "Badges saved to /tmp:"
        ls -la /tmp/badges/

        # Clean up any changes (including README.md modifications by badge action)
        git checkout -- .
        git clean -fd

        # Verify badges are still in /tmp after clean
        echo "Verifying badges in /tmp after git clean:"
        ls -la /tmp/badges/

                # Fetch or create badges branch
        # Delete local badges branch if it exists, then fetch fresh from origin
        git branch -D badges 2>/dev/null || true
        git fetch origin badges:badges 2>/dev/null || git branch badges
        
        # Force clean checkout of badges branch, removing any untracked files
        git checkout -f badges
        git clean -fd
        
        echo "Files in .badges/main before copy:"
        ls -la .badges/main/ || echo "Directory doesn't exist"
        echo "Git status before copy:"
        git status --short        # Copy the generated badge files from temp
        mkdir -p .badges/main
        cp -v /tmp/badges/*.svg .badges/main/
        echo "Badges copied to badges branch:"
        ls -la .badges/main/

        echo "Git status after copy (before add):"
        git status --short

        # Add and commit
        git add .badges/main/
        echo "Git status after add:"
        git status
        echo "Git diff staged:"
        git diff --staged --stat
        echo "Git diff staged (name-status):"
        git diff --staged --name-status

        # Commit if there are staged changes
        if ! git diff --staged --quiet; then
          git commit -m "chore: Update badges [skip ci]"
          echo "Changes committed"
        else
          echo "No changes detected - badges are already up to date"
        fi

        git push origin badges


  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
