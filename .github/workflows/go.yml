name: Go

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
        cache: true
      
    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run tests with coverage
      run: go test -v -race -timeout 10m -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        fail_ci_if_error: false
    
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      uses: tj-actions/coverage-badge-go@v2
      with:
        filename: coverage.txt
        output: .badges/main/coverage.svg
        
    - name: Get Go version
      id: go-version
      if: github.ref == 'refs/heads/main'
      run: |
        GO_VERSION=$(go list -m -f '{{.GoVersion}}')
        echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_ENV
        echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_OUTPUT
    
    - name: Generate Go version badge
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p .badges/main
        cat > .badges/main/golang.svg << EOF
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="86" height="20" role="img" aria-label="golang: ${{ env.GO_VERSION }}"><title>golang: ${{ env.GO_VERSION }}</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="86" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="49" height="20" fill="#555"/><rect x="49" width="37" height="20" fill="#007ec6"/><rect width="86" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="255" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="390">golang</text><text x="255" y="140" transform="scale(.1)" fill="#fff" textLength="390">golang</text><text aria-hidden="true" x="665" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="270">${{ env.GO_VERSION }}</text><text x="665" y="140" transform="scale(.1)" fill="#fff" textLength="270">${{ env.GO_VERSION }}</text></g></svg>
        EOF
    
    - name: Verify Changed files
      if: github.ref == 'refs/heads/main'
      uses: tj-actions/verify-changed-files@v17
      id: verify-changed-files
      with:
        files: |
          .badges/main/coverage.svg
          .badges/main/golang.svg
    
    - name: Commit badges
      if: github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git fetch origin badges || git branch badges
        git checkout badges
        mkdir -p .badges/main
        cp -f .badges/main/coverage.svg .badges/main/coverage.svg || true
        cp -f .badges/main/golang.svg .badges/main/golang.svg || true
        git add .badges/main/coverage.svg .badges/main/golang.svg
        git commit -m "chore: Update badges"
        git push origin badges --force

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
        cache: true
      
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m