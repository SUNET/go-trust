# Tree Publishing Example for Go-Trust TSL Pipeline
# This example demonstrates how to:
# 1. Load a TSL and follow its references with depth control
# 2. Apply territory and service type filters
# 3. Publish in a tree structure with territory-based organization
# 4. Create a consolidated certificate pool

# Step 1: Set comprehensive fetch options
- set-fetch-options:
    - max-depth:2                                      # Follow references up to 2 levels deep
    - user-agent:Go-Trust/1.0 TSL Tree Processor       # Identify your client
    - timeout:60s                                      # Longer timeout for tree processing
    - filter-territory:SE,FI,NO,DK,DE                  # Nordic countries and Germany
    # Uncomment to filter by service types
    # - filter-service-type:http://uri.etsi.org/TrstSvc/Svctype/CA/QC
    # - filter-service-type:http://uri.etsi.org/TrstSvc/Svctype/TSA/QTST

# Step 2: Load the root TSL (EU List of Lists)
- load:
    - https://ec.europa.eu/tools/lotl/eu-lotl.xml
  
# Step 3: Log information about the loaded tree
- log:
    - "Loaded TSL tree with depth %d and %d total TSLs"
  
# Step 4: Publish using territory-based tree structure
- publish:
    - ./output/tree-territory                          # Output directory
    - tree:territory                                   # Use territory-based directory structure
      
# Step 5: Also publish using index-based tree structure (alternative format)
- publish:
    - ./output/tree-index                              # Output directory
    - tree:index                                       # Use index-based directory structure
      
# Step 6: Create a filtered certificate pool for validation
- select:
    - status:http://uri.etsi.org/TrstSvc/TrustedList/Svcstatus/granted  # Only granted status
    - service-type:http://uri.etsi.org/TrstSvc/Svctype/CA/QC            # Only CA/QC services
      
# Step 7: Log certificate count
- log:
    - "Selected %d certificates matching the filter criteria"