# Command-Line Processing Example for Go-Trust
# This example demonstrates using go-trust as a command-line tool
# with the --no-server flag for one-shot pipeline execution.
#
# Usage:
#   ./gt --no-server example/cmdline-processing.yaml
#
# This is useful for:
# - Batch processing TSLs in CI/CD pipelines
# - Scheduled cron jobs to generate HTML reports
# - One-time transformations and processing
# - Development and testing without server overhead

# Step 1: Configure fetch options for efficient one-shot processing
- set-fetch-options:
    - max-depth:0        # Don't follow pointers (faster)
    - timeout:30s        # Reasonable timeout
    - user-agent:Go-Trust-CLI/1.0

# Step 2: Load a test TSL or use a local file
# For local file processing:
# - load:
#     - /path/to/local/tsl.xml
#
# For network fetching:
- load:
    - https://ec.europa.eu/tools/lotl/eu-lotl.xml

# Step 3: Log progress
- log:
    - "Processing TSL..."

# Step 4: Transform TSL to HTML for viewing
- transform:
    - ../xslt/tsl-to-html.xslt  # Path to XSLT stylesheet
    - ./output/html              # Output directory
    - .html                      # File extension

# Step 5: Generate an index page
- generate_index:
    - ./output/html
    - "TSL Processing Results"

# Step 6: Log completion
- log:
    - "Processing complete. HTML files generated in ./output/html/"

# Advanced usage examples:
#
# 1. With debug logging:
#    ./gt --no-server --log-level debug example/cmdline-processing.yaml
#
# 2. With JSON logging (for parsing):
#    ./gt --no-server --log-format json example/cmdline-processing.yaml
#
# 3. With log output to file:
#    ./gt --no-server --log-output /var/log/go-trust.log example/cmdline-processing.yaml
#
# 4. In a cron job (daily HTML generation):
#    0 2 * * * /usr/local/bin/gt --no-server /etc/go-trust/daily-processing.yaml
#
# 5. In CI/CD (GitLab CI example):
#    script:
#      - ./gt --no-server --log-format json pipeline.yaml
#      - cp -r output/html public/
