// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/SUNET/go-trust",
        "contact": {
            "name": "SUNET",
            "url": "https://github.com/SUNET/go-trust",
            "email": "noreply@sunet.se"
        },
        "license": {
            "name": "BSD-2-Clause",
            "url": "https://opensource.org/licenses/BSD-2-Clause"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/evaluation": {
            "post": {
                "description": "Evaluates whether a name-to-key binding is trusted according to loaded TSLs\n\nThis endpoint implements the AuthZEN Trust Registry Profile as specified in\ndraft-johansson-authzen-trust. It validates that a public key (in resource.key)\nis correctly bound to a name (in subject.id) according to ETSI TS 119612 Trust Status Lists.\n\nThe request MUST have:\n- subject.type = \"key\" and subject.id = the name to validate\n- resource.type = \"jwk\" or \"x5c\" with resource.key containing the public key/certificates\n- resource.id MUST equal subject.id\n- action (optional) with name = the role being validated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AuthZEN"
                ],
                "summary": "Evaluate trust decision (AuthZEN Trust Registry Profile)",
                "parameters": [
                    {
                        "description": "AuthZEN Trust Registry Evaluation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authzen.EvaluationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trust decision (decision=true for trusted, false for untrusted)",
                        "schema": {
                            "$ref": "#/definitions/authzen.EvaluationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns OK if the server is running and able to handle requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.HealthResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Returns OK if the server is running and able to handle requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.HealthResponse"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "description": "Returns detailed summaries of all loaded Trust Status Lists\n\nThis endpoint provides comprehensive information about each TSL including:\n- Territory code\n- Sequence number\n- Issue date\n- Next update date\n- Number of services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Get TSL information",
                "responses": {
                    "200": {
                        "description": "tsl_summaries",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/readiness": {
            "get": {
                "description": "Returns ready status if pipeline has been processed and TSLs are loaded",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "$ref": "#/definitions/api.ReadinessResponse"
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "schema": {
                            "$ref": "#/definitions/api.ReadinessResponse"
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "description": "Returns ready status if pipeline has been processed and TSLs are loaded",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "$ref": "#/definitions/api.ReadinessResponse"
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "schema": {
                            "$ref": "#/definitions/api.ReadinessResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Returns the current server status including TSL count and last processing time",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Get server status",
                "responses": {
                    "200": {
                        "description": "tsl_count, last_processed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "api.ReadinessResponse": {
            "type": "object",
            "properties": {
                "last_processed": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "ready": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "tsl_count": {
                    "type": "integer"
                }
            }
        },
        "authzen.Action": {
            "description": "Action (role) in an AuthZEN trust evaluation request",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The role name",
                    "type": "string",
                    "example": "http://ec.europa.eu/NS/wallet-provider"
                }
            }
        },
        "authzen.EvaluationRequest": {
            "description": "AuthZEN trust evaluation request (draft-johansson-authzen-trust)",
            "type": "object",
            "properties": {
                "action": {
                    "description": "Optional role constraint",
                    "allOf": [
                        {
                            "$ref": "#/definitions/authzen.Action"
                        }
                    ]
                },
                "context": {
                    "description": "Optional context (MUST NOT be critical)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resource": {
                    "description": "The public key to be validated",
                    "allOf": [
                        {
                            "$ref": "#/definitions/authzen.Resource"
                        }
                    ]
                },
                "subject": {
                    "description": "The name to be bound to the key",
                    "allOf": [
                        {
                            "$ref": "#/definitions/authzen.Subject"
                        }
                    ]
                }
            }
        },
        "authzen.EvaluationResponse": {
            "description": "AuthZEN evaluation response with trust decision",
            "type": "object",
            "properties": {
                "context": {
                    "description": "Optional context with decision details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/authzen.EvaluationResponseContext"
                        }
                    ]
                },
                "decision": {
                    "description": "Whether the name-to-key binding is authorized",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "authzen.EvaluationResponseContext": {
            "description": "Context information for evaluation response",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Optional identifier for the decision",
                    "type": "string",
                    "example": "decision-123"
                },
                "reason": {
                    "description": "Reason information (user or admin)",
                    "type": "object"
                }
            }
        },
        "authzen.Resource": {
            "description": "Resource (public key) in an AuthZEN trust evaluation request",
            "type": "object",
            "properties": {
                "id": {
                    "description": "MUST match subject.id",
                    "type": "string",
                    "example": "did:example:123"
                },
                "key": {
                    "description": "Public key data (JWK object or x5c array)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "MUST be \"jwk\" or \"x5c\"",
                    "type": "string",
                    "example": "x5c"
                }
            }
        },
        "authzen.Subject": {
            "description": "Subject in an AuthZEN trust evaluation request",
            "type": "object",
            "properties": {
                "id": {
                    "description": "The name bound to the public key",
                    "type": "string",
                    "example": "did:example:123"
                },
                "type": {
                    "description": "MUST be \"key\"",
                    "type": "string",
                    "example": "key"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Health check and readiness endpoints for Kubernetes and monitoring systems",
            "name": "Health"
        },
        {
            "description": "Server status and TSL information endpoints",
            "name": "Status"
        },
        {
            "description": "AuthZEN protocol endpoints for trust decision evaluation",
            "name": "AuthZEN"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:6001",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Go-Trust API",
	Description:      "Trust decision engine for ETSI TS 119612 Trust Status Lists (TSLs)\n\nGo-Trust provides AuthZEN-based trust decisions for X.509 certificates using ETSI trust status lists.\nIt processes TSLs, validates certificates, and provides health/metrics endpoints for production deployment.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
